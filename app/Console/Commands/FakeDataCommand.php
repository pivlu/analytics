<?php

/**
 * Pivlu Analytics - Open source and privacy-friendly web analytics.
 * https://analytics.pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@pivlu.com>
 *  * 
 *  DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Config;
use App\Models\Site;
use App\Models\LogSession;
use App\Models\LogPage;
use App\Models\LogVisitor;
use \PulkitJalan\IPGeolocation\IPGeolocation as GeoIP;
use Illuminate\Support\Facades\Schema;
use Browser;
use Artisan;

class FakeDataCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'pivlu:fake-data';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Allows to add fake data (for testing)';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        if (!Schema::hasTable('config')) {
            $this->error('Pivlu Analytics is not installed!');
            $this->line('You can install Pivlu using "pivlu:install" command.');
            return;
        }

        if (!Config::config('installed_at')) {
            $this->error('Pivlu is not installed!');
            $this->line('You can install Pivlu using "pivlu:install" command.');
            return;
        }

        $site_id = $this->ask('Input site ID where you want to add fake data: ');
        $site = Site::find($site_id);
        if (! $site) {
            $this->error('Site not found.');
            exit;
        }

        $fake_visits = $this->ask('Input the number of fake visits (1 to 100): ');
        $fake_visits = (int)$fake_visits;
        if(!($fake_visits > 0 && $fake_visits <=100)) {
            $this->error('Invalid number of fake visits. Must be betwen 1 and 100.');
            exit;
        }

        $days_before = $this->ask('Visitor date difference, in days. 0 to 90. (0 -today ');
        $this->line('Examples: 0 - today, 1 - yesterday, 2 - two days ago, 7 - last 7 days, 30 - 30 days ago etc...');
        $days_before = (int)$days_before;
        if(!($days_before >= 0 && $days_before <=90)) {
            $this->error('Invalid date difference. Must be betwen 0 and 90.');
            exit;
        }

        $geo = new GeoIP();

        for($i = 1; $i<= $fake_visits; $i++) {

            if($days_before == 0) {
                $created_at = now();
                $created_at_timestamp = date('Y-m-d H:i:s', strtotime($created_at));
            }
            else {
                $min = strtotime(date('Y-m-d',strtotime("-$days_before days")));
                $max = strtotime(date("Y-m-d"));

                $rand =  rand($min, $max);
                $created_at_timestamp = $rand;
                $created_at = date('Y-m-d H:i:s', $rand);

            }
            //$this->line($created_at);            

            $tracking_id = fake()->uuid();
            $referrer  = fake()->url();
            $scroll_percent = fake()->randomNumber(2);
            $seconds_min = fake()->numberBetween(2, 70);
            $title = substr(fake()->sentence(), 0, 120);
            $page = fake()->slug();
            $ip = fake()->ipv4();            
            $geo->setIp($ip);
            $geo_all = $geo->getRaw();

            $userAgent = fake()->userAgent();

            $this->info('Agent: ' . $userAgent);
            $this->info(print_r($geo_all));

            if ($geo_all['status'] != 'success') continue;

            $geo_cc = $geo_all['countryCode'] ?? null;
            $geo_country = $geo_all['country'] ?? null;
            $geo_region = $geo_all['region'] ?? null;
            $geo_city = $geo_all['city'] ?? null;
            $geo_region_name = $geo_all['regionName'] ?? null;
            $geo_lat = $geo_all['lat'] ?? null;
            $geo_long = $geo_all['lon'] ?? null;
            $geo_isp = $geo_all['isp'] ?? null;

            $hashed_string = $ip . $userAgent;
            $visitror_hash = md5($hashed_string);

            $browser = Browser::parse($userAgent);

            $deviceType = $browser->deviceType(); // [Mobile, Tablet, Desktop, or Bot]
            $deviceTypeDb = strtolower(substr($deviceType, 0, 1)); // m, t, d or b

            $platformName = $browser->platformName(); // Windows XP, Mac 10...
            $platformFamily = $browser->platformFamily(); // Linux, Windows, Mac...
            $platformVersion = $browser->platformVersion();

            $browserName = $browser->browserName(); // Browser's human friendly name like Firefox 3.6, Chrome 42.
            $browserFamily = $browser->browserFamily(); // Browser's vendor like Chrome, Firefox, Opera.
            $browserVersion = $browser->browserVersion(); // Browser's human friendly version string.	

            $deviceFamily = $browser->deviceFamily(); // Device's vendor like Samsung, Apple, Huawei.	
            $deviceModel = $browser->deviceModel(); // Device's brand name like iPad, iPhone, Nexus.

            $page_hash = md5($site->url . $page);
            $page = LogPage::create(['site_id' => $site_id, 'hash' => $page_hash, 'domain' => $site->url, 'page' => '/' . $page, 'title' => $title, 'created_at' => $created_at]);

            LogVisitor::updateOrCreate(
                ['site_id' => $site_id, 'hash' => $visitror_hash],
                [
                    'ip' => $ip,
                    'device_type' => $deviceTypeDb,
                    'platform_family' => $platformFamily,
                    'platform_name' => $platformName,
                    'platform_version' => $platformVersion,
                    'browser_family' => $browserFamily,
                    'browser_name' => $browserName,
                    'browser_version' => $browserVersion,
                    'device_family' => $deviceFamily,
                    'device_model' => $deviceModel,
                    'screen_size' => '1600x1200',
                    'geo_cc' => $geo_cc ?? null,
                    'geo_country' => $geo_country ?? null,
                    'geo_region' => $geo_region ?? null,
                    'geo_region_name' => $geo_region_name ?? null,
                    'geo_city' => $geo_city ?? null,
                    'geo_isp' => $geo_isp ?? null,
                    'geo_lat' => $geo_lat ?? null,
                    'geo_long' => $geo_long ?? null,
                    'created_at' => $created_at
                ]
            )->increment('count_visits');

            // check if session exists for this visitor        
            if (LogSession::where('hash', $tracking_id)->exists()) {
                if ($scroll_percent ?? null) {
                    LogSession::where('hash', $tracking_id)->where('scroll_percent', '<', $scroll_percent)->update(['scroll_percent' => $scroll_percent ?? null]);
                }
            } else {
                // Store new session
                $visitor = LogVisitor::where(['site_id' => $site_id, 'hash' => $visitror_hash])->first();

                $session = LogSession::create([
                    'hash' => $tracking_id,
                    'visitor_id' => $visitor->id,
                    'site_id' => $site_id,
                    'page_id' => $page->id,
                    'referrer' => $referrer ?? null,
                    'referrer_host' => $referrer_host ?? null,
                    'first' => $created_at_timestamp,
                    'last' => time() + rand (1, 60),
                    'scroll_percent' => $scroll_percent ?? 0,
                    'seconds_min' => $seconds_min,
                    'created_at' => $created_at
                ]);
            }
            
        } // end for


        Artisan::call('pivlu:update-stats');

        $this->info($fake_visits. ' fake visits added.');
    } 
    
}

